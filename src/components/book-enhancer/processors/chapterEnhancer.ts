
import { ChapterProcessingError } from '@/components/ebook-uploader/processors/ErrorHandler';
import { EnhancementOptions, EnhancementResult } from '../types/enhancementTypes';
import { applyGrammarCorrections } from './grammarProcessor';
import { applyProfessionalFormatting } from './formattingProcessor';
import { trackProcessingTime } from '../utils/enhancementUtils';

export const enhanceChapterContent = async (
  chapterContent: string, 
  options: EnhancementOptions
): Promise<EnhancementResult> => {
  try {
    const { result: enhancedContent, processingTime } = await trackProcessingTime(async () => {
      let content = chapterContent;
      const warnings: string[] = [];
      
      if (options.enableGrammarCheck || options.enableSpellingCheck) {
        if (options.enableGrammarCheck && options.grammarLevel > 3) {
          warnings.push('High grammar level may alter the original voice significantly');
        }
        
        content = applyGrammarCorrections(content, options.grammarLevel);
      }
      
      if (options.enableContentExpansion) {
        if (content.length > 10000 && options.expansionLevel > 2) {
          warnings.push('Content is already lengthy; significant expansion may make it too verbose');
        }
        
        const paragraphs = content.split('</p><p>');
        if (paragraphs.length > 1) {
          const expansionAmount = options.expansionLevel;
          const expansionText = `This is an example of expanded content that would normally be generated by an AI model. This text demonstrates how the content expansion feature would work in a real implementation. The AI would analyze the context and add relevant, engaging content to enrich the reading experience.`;
          
          if (expansionAmount >= 2) {
            paragraphs.splice(2, 0, expansionText);
          }
          content = paragraphs.join('</p><p>');
        }
      }
      
      if (options.enableProfessionalFormatting) {
        content = applyProfessionalFormatting(content, {
          fontFamily: options.fontFamily,
          generateTOC: options.generateTOC,
          addChapterBreaks: options.addChapterBreaks
        });
      }
      
      await new Promise(resolve => setTimeout(resolve, 500));
      
      return content;
    });
    
    console.info(`Enhanced chapter in ${processingTime.toFixed(2)}ms`);
    
    return { 
      content: enhancedContent,
      processingTime,
      warnings: [] // In a real implementation, warnings would be populated
    };
  } catch (error) {
    console.error('Error enhancing chapter content:', error);
    
    return {
      content: chapterContent, // Return original content on error
      errors: [{
        message: 'Failed to enhance chapter content',
        code: 'ENHANCEMENT_FAILED',
        details: error instanceof Error ? error.message : String(error)
      }]
    };
  }
};
